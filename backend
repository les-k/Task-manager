from flask import Flask, render_template, request, redirect, url_for, flash, session
from datetime import datetime
import sqlite3

app = Flask(__name__)
app.secret_key = 'my_secret_key'

# Helper function to get a database connection
def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect('tasks.db')
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

# Create tasks table in the database if it doesn't exist
def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()

# Define a User class to store user data
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password

    @staticmethod
    def get(username):
        db = get_db()
        cur = db.cursor()
        cur.execute('SELECT username, password FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        if row is None:
            return None
        return User(row[0], row[1])

# Define a Task class to store task data
class Task:
    def __init__(self, title, description, status, reminder_time, user_id):
        self.title = title
        self.description = description
        self.status = status
        self.reminder_time = reminder_time
        self.user_id = user_id

    def save(self):
        db = get_db()
        cur = db.cursor()
        cur.execute('INSERT INTO tasks (title, description, status, reminder_time, user_id) VALUES (?, ?, ?, ?, ?)',
                    (self.title, self.description, self.status, self.reminder_time, self.user_id))
        db.commit()

    @staticmethod
    def get_all(user_id):
        db = get_db()
        cur = db.cursor()
        cur.execute('SELECT id, title, description, status, reminder_time FROM tasks WHERE user_id = ?', (user_id,))
        rows = cur.fetchall()
        tasks = []
        for row in rows:
            task = Task(row[1], row[2], row[3], row[4], user_id)
            task.id = row[0]
            tasks.append(task)
        return tasks

    @staticmethod
    def delete(id):
        db = get_db()
        cur = db.cursor()
        cur.execute('DELETE FROM tasks WHERE id = ?', (id,))
        db.commit()

# Create a default user with username 'admin' and password 'password'
def create_default_user():
    db = get_db()
    cur = db.cursor()
    cur.execute('INSERT INTO users (username, password) VALUES (?, ?)', ('admin', 'password'))
    db.commit()

# Initialize the database and create the default user if necessary
init_db()
if User.get('admin') is None:
    create_default_user()

@app.route('/')
def index():
    if 'username' not in session:
        return redirect(url_for('login'))
    user = User.get(session['username'])
    tasks = Task.get_all(user.username)
    return render_template('index.html', tasks=tasks)

@app.route('/add_task', methods=['POST'])
def add_task 
@app.route('/add_task', methods=['POST'])
def add_task():
if 'username' not in session:
return redirect(url_for('login'))
user = User.get(session['username'])
title = request.form['title']
description = request.form['description']
status = request.form['status']
reminder_time = request.form['reminder_time']
task = Task(title, description, status, reminder_time, user.username)
task.save()
flash('Task added successfully!')
return redirect(url_for('index'))

@app.route('/delete_task/int:id', methods=['POST'])
def delete_task(id):
if 'username' not in session:
return redirect(url_for('login'))
Task.delete(id)
flash('Task deleted successfully!')
return redirect(url_for('index'))

@app.route('/login', methods=['GET', 'POST'])
def login():
if request.method == 'POST':
username = request.form['username']
password = request.form['password']
user = User.get(username)
if user is None:
flash('Invalid username or password')
elif user.password != password:
flash('Invalid username or password')
else:
session['username'] = user.username
return redirect(url_for('index'))
return render_template('login.html')

@app.route('/logout')
def logout():
session.pop('username', None)
return redirect(url_for('login'))














